Michael Madden
Chris Black
Ian Ruth

Assignment 3 

    Fortunately, our game is relatively simple so we will not have to make too many changes.  In order to make our game multiplayer, we are going to take away the back wall, add an additional player-controlled paddle that moves in the plane where this wall used to be, and change the scoring to be more like a pong game.  We will try out using TCP/IP as our first protocol because we do not have very much data to communicate, meaning we do not have to worry about bandwidth as much and all of the network data loss handling is already taken care of for us.  I think the more generic architecture referenced in class that uses a server-client model even in single-player is preferable to implement if we have enough time, but it may be simpler to just use this model in multiplayer since our game will only really work with two players with it's current rules.  This go around, we will not be splitting up the project into components to work on separately, but we will split it up by topic and try to tackle them together.  Working separately worked alright for the last project when there were unrelated components to add, but now we are adding just one feature and we all think it is important for each of us to learn network programming skills.  In addition to the network aspect of this project, we will hopefully have time to refine the other parts of our project we have already been working on. We will be tackling the issues in order of convenience of testing, so first we will work on setting up the multiplayer aspect in Ogre such as getting to it from a GUI and setting up the game so that it is playable by two players.  This is first so we can get right to testing the networking code as soon as we are writing it.  Then we will be doing the actual network programming and setting up the client-server relationship according to our model.  After we have finished the actual graded part of the project, we will work on refining the game as a whole as time permits.